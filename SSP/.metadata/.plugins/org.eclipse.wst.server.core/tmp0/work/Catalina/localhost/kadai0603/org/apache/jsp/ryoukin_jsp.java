/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-01-21 02:47:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ryoukin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"kadai0603/yamanote\" method=\"get\">\r\n");
      out.write("乗車駅：\r\n");
      out.write("<select name=\"Rideon\">\r\n");
      out.write("\t<option value=\"東京\">東京</option>\r\n");
      out.write("\t<option value=\"神田\">神田</option>\r\n");
      out.write("\t<option value=\"秋葉原\">秋葉原</option>\r\n");
      out.write("\t<option value=\"御徒町\">御徒町</option>\r\n");
      out.write("\t<option value=\"上野\">上野</option>\r\n");
      out.write("\t<option value=\"鶯谷\">鶯谷</option>\r\n");
      out.write("\t<option value=\"日暮\">日暮里</option>\r\n");
      out.write("\t<option value=\"西日暮里\">西日暮里</option>\r\n");
      out.write("\t<option value=\"田端\">田端</option>\r\n");
      out.write("\t<option value=\"駒込\">駒込</option>\r\n");
      out.write("\t<option value=\"巣鴨\">巣鴨</option>\r\n");
      out.write("\t<option value=\"大塚\">大塚</option>\r\n");
      out.write("\t<option value=\"池袋\">池袋</option>\r\n");
      out.write("\t<option value=\"目白\">目白</option>\r\n");
      out.write("\t<option value=\"高田馬場\">高田馬場</option>\r\n");
      out.write("\t<option value=\"新大久保\">新大久保</option>\r\n");
      out.write("\t<option value=\"新宿\">新宿</option>\r\n");
      out.write("\t<option value=\"代々木\">代々木</option>\r\n");
      out.write("\t<option value=\"原宿\">原宿</option>\r\n");
      out.write("\t<option value=\"渋谷\">渋谷</option>\r\n");
      out.write("\t<option value=\"恵比寿\">恵比寿</option>\r\n");
      out.write("\t<option value=\"目黒\">目黒</option>\r\n");
      out.write("\t<option value=\"五反田\">五反田</option>\r\n");
      out.write("\t<option value=\"大崎\">大崎</option>\r\n");
      out.write("\t<option value=\"品川\">品川</option>\r\n");
      out.write("\t<option value=\"田町\">田町</option>\r\n");
      out.write("\t<option value=\"浜松町\">浜松町</option>\r\n");
      out.write("\t<option value=\"有楽町\">有楽町</option>\r\n");
      out.write("</select>\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("降車駅：\r\n");
      out.write("<select name=\"Rideon\">\r\n");
      out.write("\t<option value=\"東京\">東京</option>\r\n");
      out.write("\t<option value=\"神田\">神田</option>\r\n");
      out.write("\t<option value=\"秋葉原\">秋葉原</option>\r\n");
      out.write("\t<option value=\"御徒町\">御徒町</option>\r\n");
      out.write("\t<option value=\"上野\">上野</option>\r\n");
      out.write("\t<option value=\"鶯谷\">鶯谷</option>\r\n");
      out.write("\t<option value=\"日暮\">日暮里</option>\r\n");
      out.write("\t<option value=\"西日暮里\">西日暮里</option>\r\n");
      out.write("\t<option value=\"田端\">田端</option>\r\n");
      out.write("\t<option value=\"駒込\">駒込</option>\r\n");
      out.write("\t<option value=\"巣鴨\">巣鴨</option>\r\n");
      out.write("\t<option value=\"大塚\">大塚</option>\r\n");
      out.write("\t<option value=\"池袋\">池袋</option>\r\n");
      out.write("\t<option value=\"目白\">目白</option>\r\n");
      out.write("\t<option value=\"高田馬場\">高田馬場</option>\r\n");
      out.write("\t<option value=\"新大久保\">新大久保</option>\r\n");
      out.write("\t<option value=\"新宿\">新宿</option>\r\n");
      out.write("\t<option value=\"代々木\">代々木</option>\r\n");
      out.write("\t<option value=\"原宿\">原宿</option>\r\n");
      out.write("\t<option value=\"渋谷\">渋谷</option>\r\n");
      out.write("\t<option value=\"恵比寿\">恵比寿</option>\r\n");
      out.write("\t<option value=\"目黒\">目黒</option>\r\n");
      out.write("\t<option value=\"五反田\">五反田</option>\r\n");
      out.write("\t<option value=\"大崎\">大崎</option>\r\n");
      out.write("\t<option value=\"品川\">品川</option>\r\n");
      out.write("\t<option value=\"田町\">田町</option>\r\n");
      out.write("\t<option value=\"浜松町\">浜松町</option>\r\n");
      out.write("\t<option value=\"有楽町\">有楽町</option>\r\n");
      out.write("</select>\r\n");
      out.write("<br>\r\n");
      out.write("<input type=\"submit\" value=\"計算\">\r\n");
      out.write("<input type=\"reset\" value=\"リセット\" onclick=\"location.reload()\">\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
