/*
 *
 */
class ListInsert06 {
    public static void main(String[] args) {
        final int NULL = 65535;
        
        char[][] codes = {//二次元配列,@2222を新しくトップのノードに挿入したい
            { 2,        4,   5,   1,   6,   3,  NULL, 2222, 3333, 4444},
            { '\u0000','d', 'a', 'c', 'e', 'b', 'z',  '@',  'X',  ' '},//トップにダミーが入ってる
        };
        //ポインタが次のノード（一次の列）を指すルールに従えば
        //先端から順番通りに並べなくてもOK
        
        int i;

        i = 0;//トップのノード（ダミー）を表す表
        while (codes[0][i] != NULL) {//終端ノードじゃなかったら真(true)
            i = codes[0][i];//ポインタ部のポインタ（次のノード列の添え字）でiを更新、この場合だと始めは[0][2]に移る
            //[0][2]のポイントは5だから、[0][5]でbが出力される
            //配列の場合はiは++するが、リスト構造はポインタ部の情報を使って更新
            System.out.print(codes[1][i]+ " ");
        }
        System.out.println("\n");
        int o = 8;//新しいノードの列数
        int m = 3;//データ部'c'のノードの列数
        codes[0][o] = codes[0][m];
        codes[0][m] = (char)o;
        i = 0;
        while (codes[0][i] != NULL) {//終端ノードじゃなかったら真(true)
            i = codes[0][i];//ポインタ部のポインタ（次のノード列の添え字）でiを更新、この場合だと始めは[0][2]に移る
            //[0][2]のポイントは5だから、[0][5]でbが出力される
            //配列の場合はiは++するが、リスト構造はポインタ部の情報を使って更新
            System.out.print(codes[1][i]+ " ");
        }
    }
}